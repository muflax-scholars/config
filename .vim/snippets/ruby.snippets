# #!/usr/bin/ruby
snippet #!
	#!/usr/bin/ruby
# New Block
snippet =b
	=begin rdoc
		${1}
	=end
snippet y
	:yields: ${1:arguments}
snippet rb
	#!/usr/bin/env ruby -w
snippet req
	require "${1}"${2}
snippet #
	# =>
snippet end
	__END__
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet defi
	def initialize(${1:args})
		${2}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end
snippet while
	while ${1:condition}
		${2}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet cla class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
# attr_reader
snippet r
	attr_reader :${1:attr_names}
# attr_writer
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${1:attr_names}
# include Enumerable
snippet enum
	include Enumerable

	def each(&block)
		${1}
	end
# include Comparable
snippet comp
	include Comparable

	def <=>(other)
		${1}
	end
# def method_missing
snippet defmm
	def method_missing(meth, *args, &blk)
		${1}
	end
snippet am
	alias_method :${1:new_name}, :${2:old_name}
snippet app
	if __FILE__ == $PROGRAM_NAME
		${1}
	end
snippet zip
	zip(${1:enums}) { |${2:row}| ${3} }
# loops
snippet down
	downto(${1:0}) { |${2:i}| ${3} }
snippet step
	step(${1:2}) { |${2:n}| ${3} }
snippet times
	times { |${1:n}| ${2} }
snippet upto
	upto(${1:1.0/0.0}) { |${2:n}| ${3} }
snippet loop
	loop { ${1} }
snippet each
	each { |${1:x}| ${2} }
snippet eab
	each_byte { |${1:byte}| ${2} }
snippet eac
	each_char { |${1:chr}| ${2} }
snippet eai
	each_index { |${1:i}| ${2} }
snippet eak
	each_key { |${1:key}| ${2} }
snippet eal
	each_line { |${1:line}| ${2} }
snippet eap
	each_pair { |${1:name}, ${2:val}| ${3} }
snippet eas
	each_slice(${1:2}) { |${2:group}| ${3} }
snippet eav
	each_value { |${1:val}| ${2} }
snippet eawi
	each_with_index { |${1:x}, ${2:i}| ${3} }
snippet reve
	reverse_each { |${1:x}| ${2} }
snippet inj
	inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }
snippet map
	map { |${1:x}| ${2} }
snippet mapwi
	enum_with_index.map { |${1:x}, ${2:i}| ${3} }
snippet sort
	sort { |a, b| ${1} }
snippet sorb
	sort_by { |${1:x}| ${2} }
snippet rand
	sort_by { rand }
snippet all
	all? { |${1:x}| ${2} }
snippet any
	any? { |${1:x}| ${2} }
snippet cl
	classify { |${1:x}| ${2} }
snippet col
	collect { |${1:x}| ${2} }
snippet det
	detect { |${1:x}| ${2} }
snippet fet
	fetch(${1:name}) { |${2:key}| ${3} }
snippet find
	find { |${1:x}| ${2} }
snippet fina
	find_all { |${1:x}| ${2} }
snippet grep
	grep(${1:/pattern/}) { |${2:match}| ${3} }
snippet sub
	${1:g}sub(${2:/pattern/}) { |${3:match}| ${4} }
snippet scan
	scan(${1:/pattern/}) { |${2:match}| ${3} }
snippet max
	max { |a, b|, ${1} }
snippet min
	min { |a, b|, ${1} }
snippet par
	partition { |${1:x}|, ${2} }
snippet rej
	reject { |${1:x}|, ${2} }
snippet sel
	select { |${1:x}|, ${2} }
snippet lam
	lambda { |${1:args}| ${2} }
snippet do
	do |${1:variable}|
		${2}
	end
snippet :
	:${1:key} => ${2:"value"}${3}
snippet open
	open(${1:"path/or/url/or/pipe"}, "${2:w}") { |${3:io}| ${4} }
# unix_filter {}
snippet unif
	ARGF.each_line${1} do |${2:line}|
		${3}
	end
# relative paths in a portable way
snippet relpa
	File.join(File.dirname(__FILE__), "${1:../whatever}")${2}
snippet relq
	require File.join(File.dirname(__FILE__), "${1:../whatever}")${2}
# option_parse {}
snippet optp
	require "optparse"

	options = {${1:default => "args"}}

	ARGV.options do |opts|
		opts.banner = "Usage: #{File.basename($PROGRAM_NAME)}
snippet opt
	opts.on( "-${1:o}", "--${2:long-option-name}", ${3:String},
	         "${4:Option description.}") do |${5:opt}|
		${6}
	end
# testing
snippet des
	describe "${1:description}" do
		${2}
	end
snippet desc
	describe ${1:class} do
		${2}
	end
snippet descd
	describe ${1:class} "${2:description}" do
		${3}
	end
snippet it
	it "should ${1:desc}" do
		${2}
	end
snippet itsh
	it "should ${1:desc}" do
		${2:model}.should ${3}
	end
snippet itshn
	it "should not ${1:desc}" do
		${2:model}.should_not ${3}
	end
snippet itshb
	it "should be ${1:desc}" do
		${2:model}.should be_${3:empty}
	end
snippet itshnb
	it "should not be ${1:desc}" do
		${2:model}.should_not be_${3:empty}
	end
snippet con
	context "${1:when}" do
		${2}
	end
snippet bef
	before(:${1:each}) do
		${2}
	end
snippet aft
	after(:${1:each}) do
		${2}
	end
