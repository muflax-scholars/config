snippet imp
	import ${1:module}
snippet from
	from ${1:module} import ${2:*}
snippet wh
	while ${1:condition}:
		${2:pass}
snippet while
	while ${1:condition}:
		${2:pass}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:pass}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4}
# New Method
snippet ds
	def ${1:mname}(self, ${2:arg}):
		"""${3:docstring for $1}"""
		${4}
snippet .
	self.${1:attr}
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
snippet tryf Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet with
	with ${1:object} as ${2:name}:
		${3:pass}
# if __name__ == '__main__':
snippet ifm
	if __name__ == '__main__':
		${1:main()}

# optparse
snippet optp
	parser = optparse.OptionParser(${1})
	${2}
	opt, args = parser.parse_args()

snippet addo
	parser.add_option("-${1:f}", "--${2:force}", dest="${3:force}",
				      help="${4:force}"${5})
	${6}

# Unit testing
snippet ifu
	if __name__ == '__main__':
		${1:unittest.main()}
snippet ae
	self.assertEqual(${1:actual}, ${2:expected})
	${3}
snippet ane
	self.assertNotEqual(${1:actual}, ${2:expected})
	${3}
snippet aae
	self.assertAlmostEqual(${1:actual}, ${2:expected})
	${3}
snippet ana
	self.assertNotAlmostEqual(${1:actual}, ${2:expected})
	${3}
snippet ar
	self.assertRaises(${1:exception}, ${2:function})
	${3}
snippet ass
	self.assertTrue(${1:expected})
	${3}
