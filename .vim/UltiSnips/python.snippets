#! header
snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# encoding: utf-8
$0
endsnippet

# main
snippet ifm
if __name__ == '__main__':
	${1:main()}$0
endsnippet

##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_comment_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p
def get_args(arglist, snip):
    args = [arg.split('=')[0].strip() for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg and arg != "self"]

    if args:
        snip += ""

    for arg in args:
        style = snip.opt("g:ultisnips_comment_style", "normal")
        if style == "doxygen":
            snip += "@param %s " % arg
        else:
            snip += "%s -- " % arg
    return args
endglobal

# class
snippet cla "smart class" b
class ${1:ClassName}(${2:object}):
	""" ${3:docstring for $1 }"""
	def __init__(self, ${4:args}):
		"""${5:initializes $1}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4], snip)

if args:
    snip += '"""'
else:
    snip.rv += ' """'

# call __init__ of upper class
#for sup in t[2].split(","):
#    sup = sup.strip()
#    snip += sup + ".__init__(self)"

for arg in args:
    snip += "self._%s = %s" % (arg, arg)
`
		$0
endsnippet

# def function
snippet def "smart def" b
def ${1:function}(${2:self}):
    """${3:does stuff}`!p
snip.rv = "" # Force update
snip >> 1

args = get_args(t[2], snip)

`${4:

    `!p
snip.rv = "" # Force update
style = snip.opt("g:ultisnips_python_style", "normal")

if style == "doxygen":
    snip.rv = "@return"
else:
    snip.rv = "returns:"` ${5:stuff}
    }"""
    ${0:pass}

endsnippet

# def with self
snippet des "smart def with self" b
def ${1:function}(self, ${2:args}):
    """${3:does stuff}`!p
snip.rv = "" # Force update
snip >> 1

args = get_args(t[2], snip)

`${4:

    `!p
snip.rv = "" # Force update
style = snip.opt("g:ultisnips_python_style", "normal")

if style == "doxygen":
    snip.rv = "@return"
else:
    snip.rv = "returns:"` ${5:stuff}
    }"""
    ${0:pass}

endsnippet

##########
# import #
##########

# doesn't expand when there is a word in front
snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet

# import
snippet from "from blah import blah" b
from ${1:module} import ${2:stuff}
endsnippet

snippet imp
import ${1:module}
endsnippet

##############
# PROPERTIES #
##############
snippet r "Read Only Property" b
@property
def ${1:property}(self):
	${2:return self._$1}$0
endsnippet

snippet rw "Read write property" b
def ${1:property}():
	${2/.+/(?0:""")/}${2:Read-write property $1.}${2/.+/(?0:"""\n		)/}def fget(self):
		return self._$1$0
	def fset(self, value):
		self._$1 = value
	return locals()
$1 = property(**$1())
endsnippet

##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except" b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet trye "Try / Except / Else" b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "Try / Except / Finally" b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally" b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
finally:
	${6:pass}
endsnippet

# with
snippet with
with ${1:obj} as ${2:f}:
    ${3:pass}
endsnippet

##############
# Assertions #
##############
snippet ifu
if __name__ == '__main__':
    ${1:unittest.main()}
endsnippet

snippet ae "Assert equal" b
self.assertEqual(${1:first}, ${2:second})
endsnippet

snippet ane "Assert not equal" b
self.assertNotEqual(${1:first}, ${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${0:exp})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:expression})
endsnippet

snippet aae "Assert almost equal" b
self.assertAlmostEqual(${1:first}, ${2:second})
endsnippet

snippet ana "Assert almost equal" b
self.assertNotAlmostEqual(${1:first}, ${2:second})
endsnippet

snippet ar "Assert raises" b
self.assertRaises(${1:exception}, ${2:func}, ${3:arguments})
endsnippet

############
# optparse #
############

snippet optp
parser = optparse.OptionParser(${1})
${2}
opt, args = parser.parse_args()
endsnippet

snippet addo
parser.add_option("-${1:f}", "--${2:force}", dest="${3:force}",
                  help="${4:force}"${5})
${6}
endsnippet

#########
# loops #
#########

# while
snippet whi "while" b
while ${1:condition}:
	${2:pass}
endsnippet

snippet for "for" b
for ${1:needle} in ${2:haystack}:
	${3:pass}
endsnippet

