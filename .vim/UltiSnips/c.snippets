# main()
snippet main
int main (int argc, const char *argv[])
{
	$0
	return 0;
}
endsnippet

# include
snippet inc
#include <${1:stdio}.h>
endsnippet

snippet incf
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

# define
snippet ndef "#ifndef … #define … #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet def
#define $1
endsnippet

# enum
snippet enum
enum ${1:name} { 
    $0 
};
endsnippet

# header guard
snippet once
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet

# typdef
snippet typ 
typedef ${1:int} ${2:custom type};
endsnippet

# struct
snippet str"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

# typedef struct
snippet tds
typedef struct {
	${0:/* data */}
} ${1:`!p snip.rv = (snip.basename or "name") + "_t"`};
endsnippet

# for
snippet for
for (${2:i} = 0; $2 < ${1:count}; ${3:$2++}) {
	${0:/* code */}
}
endsnippet

# do while
snippet do
do {
	${0:/* code */}
} while (${1:/* condition */});
endsnippet

# while
snippet whi
while (${1:/* condition */}) {
	${0:/* code */}
}
endsnippet

# if
snippet if
if (${1:/* condition */}) {
	${0:/* code */}
}
endsnippet

# else
snippet els
else {
    ${0:/* code */}
}
endsnippet

# printf
snippet pri
printf("${1:%s}\n", $2);
endsnippet

snippet fpr
fprintf(${1:stderr}, "${2:%s}\n", $3);
endsnippet

# function declaration
snippet fun
${1:void} ${2:function name}(${3})
{
    ${4:/* code */}
}
endsnippet

# ... for header
snippet fund
${1:void} ${2:function name}(${3});
endsnippet

# unsigned
snippet uns
unsigned ${1:int}
endsnippet

