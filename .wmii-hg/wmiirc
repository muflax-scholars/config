#!/bin/zsh -y
export LANG="ja_JP.UTF-8"
cowsay "wmii starting on  ${DISPLAY} at $(date +%H:%M:%S)..."

wmiiscript=wmiirc # For wmii.sh
. wmii.sh

# Configuration Variables
hostname=$(hostname)

# Bars
noticetimeout=5
noticebar=/rbar/!notice

# Colors tuples: "<text> <background> <border>"
WMII_NORMCOLORS='#ffffff #000000 #000055'
WMII_FOCUSCOLORS='#ffffff #3465a4 #3465a4'

WMII_BACKGROUND='#000000'
WMII_FONT='-*-gothic-medium-*-12-*'

set -- $(echo $WMII_NORMCOLORS $WMII_FOCUSCOLORS)
WMII_TERM="urxvt"

# wimenu can suck my dick
WMII_DMENU="dmenu -b -i -fn ${WMII_FONT} -nb #000000 -nf #FFFFFF -sb #0066ff"

# WM Configuration

# background
nitrogen --restore &

# Column Rules
wmiir write /colrules <<EOF
/gimp/ -> 17+83+41
/.*/ -> 50+50
EOF

# Tagging Rules
wmiir write /tagrules <<EOF
/MPlayer/ -> ~
/Wine/ -> ~
/CRONOMETER/ -> ~
EOF

# Status Bar Info

# cycle calculations
#TODO: support minutes
cycles=(4 9 14 20)

cycle() {
    hour=$(date "+%H")
    min=$(date "+%M")
    first=1
    
    for c in $(seq 1 ${#cycles}) 
    do  
        if [[ $cycles[$c] -gt $hour ]] then
            first=0
            break
        fi
    done
     
    [[ $first == 1 ]] && c=1           
    diff=$(((($cycles[$c]*60) - ($hour*60 + $min)) ))
    [[ $diff < 0 ]] && diff=$(( 1440 + $diff ))
    printf "C: %d時%02d分" $(($diff/60)) $(($diff%60))
    return 0
}                    

# processes with >= 50% cpu load
cpu_hogs() {
    ps -eo pcpu,ucmd --sort -pcpu | tail -n +2 | while read proc
    do
        if [[ $proc[(w)1] -ge 50.0 ]] then
            echo $proc[(w)1] ${${proc[(w)2]}[1,10]}
        fi
    done
                           
}

if [[ $hostname == "mumm-ra" ]] then
    mixer="Software"
else
    mixer="Master"
fi

# the status bar
status() {
    statusbar=()

    # current load
    st_uptime="L: $(uptime | sed -e 's/.*://; s/,//g')"
    
    # memory usage
    mem=(${$(free -m | grep "Mem:")[2,7]})
    st_mem=$(printf "M: %4d(%+5d)/%4d" $(($mem[2] - $mem[5] - $mem[6])) $mem[6] $mem[1])

    # processes with >= 50% cpu load
    st_ps="P: $(cpu_hogs)"

    # current date
    st_date="D: $(h=$(($(date "+%y")+12)); date "+%A, 平成${h}年%m月%d日 %H時%M分%S秒")"
    
    # rest time of current cycle
    st_cycle=$(cycle)
    
    # days until apocalypse
    st_apoc="A: $(( ($(date --date "2012-12-21" "+%s") - $(date "+%s")) / 86400))日" 
    
    # volume
    st_volume="V: $(amixer get $mixer | grep -e "\[[0-9]\+%\]" | head -n 1 | sed -e "s/.*\[\([0-9]\+%\)\].*/\1/")"
    
    # expanding widgets are always left
    statusbar+=("$st_ps")

    # laptop specific
    if [[ $hostname == "kira" ]] then
        # wifi strength
        st_wifi="W: $(cat /sys/class/net/wlan0/wireless/link)%"
        
        # battery status
        st_battery="B: ${$(acpi)[(w)3,-1]}"

        statusbar+=("$st_wifi" "$st_battery")
    fi
    statusbar+=("$st_uptime" "$st_mem" "$st_volume" "$st_cycle" "$st_date" "$st_apoc")
    echo -n ${(j: | :)statusbar}
}

local_events() { true;}
wi_runconf -s wmiirc_local

echo $WMII_NORMCOLORS | wmiir create $noticebar

# helper functions for tags
# current tag
cur_tag() {
    wmiir read /tag/sel/ctl | head -n 1
}

# list all tags
read_tags() {
    wmiir ls /tag | sed '\,^sel/$,d;s,/,,'
}

# go from current tag to next tag in list
# shamelessly stolen :)
next_tag() {
    awk -v 'curtag='"$(cur_tag)" '
        NR==1 {first = $0}
        $0==curtag {if (getline) print $0; else print first; exit}'
}

# Event processing, including key handling
MODKEY=Mod4
UP=n
DOWN=r
LEFT=s
RIGHT=t

events() {
    sed 's/^\ \ \ \ //' <<'EOF'
    # Events
    Event CreateTag
        echo "$WMII_NORMCOLORS" "$@" | wmiir create "/lbar/$@"
    Event DestroyTag
        wmiir remove "/lbar/$@"
    Event FocusTag
        wmiir xwrite "/lbar/$@" "$WMII_FOCUSCOLORS" "$@"
    Event UnfocusTag
        wmiir xwrite "/lbar/$@" "$WMII_NORMCOLORS" "$@"
    Event UrgentTag
        shift
        wmiir xwrite "/lbar/$@" "*$@"
    Event NotUrgentTag
        shift
        wmiir xwrite "/lbar/$@" "$@"
    Event LeftBarClick LeftBarDND
        shift
        wmiir xwrite /ctl view "$@"
    Event Unresponsive
        {
            client=$1; shift
            msg="The following client is not responding. What would you like to do?$wi_nl"
            resp=$(wihack -transient $client \
                      xmessage -nearmouse -buttons Kill,Wait -print \
                               "$msg $(wmiir read /client/sel/label)")
            if [ "$resp" = Kill ]; then
                wmiir xwrite /client/$client/ctl slay &
            fi
        }&
    Event Notice
        wmiir xwrite $noticebar $wi_arg

        kill $xpid 2>/dev/null # Let's hope this isn't reused...
        { sleep $noticetimeout; wmiir xwrite $noticebar ' '; }&
        xpid = $!
    Menu Client-3-Delete
        wmiir xwrite /client/$1/ctl kill
    Menu Client-3-Kill
        wmiir xwrite /client/$1/ctl slay
    Menu Client-3-Fullscreen
        wmiir xwrite /client/$1/ctl Fullscreen on
    Event ClientMouseDown
        wi_fnmenu Client $2 $1 &
    Menu LBar-3-Delete
        tag=$1; clients=$(wmiir read "/tag/$tag/index" | awk '/[^#]/{print $2}')
        for c in $clients; do
            if [ "$tag" = "$(wmiir read /client/$c/tags)" ]; then
                wmiir xwrite /client/$c/ctl kill
            else
                wmiir xwrite /client/$c/tags -$tag
            fi
            if [ "$tag" = "$(wi_seltag)" ]; then
                newtag=$(wi_tags | awk -v't='$tag '
                    $1 == t { if(!l) getline l
                          print l
                          exit }
                    { l = $0 }')
                wmiir xwrite /ctl view $newtag
            fi
        done
    Event LeftBarMouseDown
        wi_fnmenu LBar "$@" &
    # Actions
    Action quit
        wmiir xwrite /ctl quit
    Action exec
        wmiir xwrite /ctl exec "$@"
    Action rehash
        proglist $PATH >$progsfile
    Action status
        set +xv
        if wmiir remove /rbar/status 2>/dev/null; then
            sleep 2
        fi
        echo "$WMII_NORMCOLORS" | wmiir create /rbar/status
        while status | wmiir write /rbar/status; do
            sleep 1
        done
    # Key Bindings
    #Key $MODKEY-Control-t
    #    case $(wmiir read /keys | wc -l | tr -d ' \t\n') in
    #    0|1)
    #        echo -n "$Keys" | wmiir write /keys
    #        wmiir xwrite /ctl grabmod $MODKEY;;
    #    *)
    #        wmiir xwrite /keys $MODKEY-Control-t
    #        wmiir xwrite /ctl grabmod Mod3;;
    #    esac       
    Key $MODKEY-Shift-space
        wmiir xwrite /tag/sel/ctl select toggle
    Key $MODKEY-space
        wmiir xwrite /tag/sel/ctl send sel toggle
    Key $MODKEY-x
        wmiir xwrite /tag/sel/ctl colmode sel default-max
    Key $MODKEY-v
        wmiir xwrite /tag/sel/ctl colmode sel stack-max
    Key $MODKEY-l
        wmiir xwrite /tag/sel/ctl colmode sel stack+max
    Key $MODKEY-a
        action $(wi_actions | $WMII_DMENU) &
    Key $MODKEY-e
        eval wmiir setsid "$(dmenu_path | $WMII_DMENU)" &
    Key $MODKEY-Shift-h
        wmiir xwrite /ctl view $(wi_tags | $WMII_DMENU) &
    Key $MODKEY-Shift-g
        wmiir xwrite "/client/$(wmiir read /client/sel/ctl | grep '^0x')/tags" $(wi_tags | $WMII_DMENU) &
    Key $MODKEY-p
        eval wmiir setsid $WMII_TERM &
    Key $MODKEY-f
        wmiir xwrite /client/sel/ctl Fullscreen toggle
    Key $MODKEY-w
        wmiir xwrite /client/sel/ctl kill
    Key $MODKEY-$LEFT
        wmiir xwrite /tag/sel/ctl select left
    Key $MODKEY-$RIGHT
        wmiir xwrite /tag/sel/ctl select right
    Key $MODKEY-$DOWN
        wmiir xwrite /tag/sel/ctl select down
    Key $MODKEY-$UP
        wmiir xwrite /tag/sel/ctl select up
    Key $MODKEY-Shift-$LEFT
        wmiir xwrite /tag/sel/ctl send sel left
    Key $MODKEY-Shift-$RIGHT
        wmiir xwrite /tag/sel/ctl send sel right
    Key $MODKEY-Shift-$DOWN
        wmiir xwrite /tag/sel/ctl send sel down
    Key $MODKEY-Shift-$UP
        wmiir xwrite /tag/sel/ctl send sel up
    # resize
    Key $MODKEY-Control-$LEFT
        wmiir xwrite /tag/sel/ctl grow sel sel left
    Key $MODKEY-Control-$RIGHT
        wmiir xwrite /tag/sel/ctl grow sel sel right -1
    Key $MODKEY-Control-$UP
        wmiir xwrite /tag/sel/ctl grow sel sel up
    Key $MODKEY-Control-$DOWN
        wmiir xwrite /tag/sel/ctl grow sel sel down -1
    Key $MODKEY-g
        wmiir xwrite /ctl view "$(read_tags | next_tag)"
    Key $MODKEY-h
        wmiir xwrite /ctl view "$(read_tags | tac | next_tag)"
    Key $MODKEY-u
        amixer -q set $mixer 5+
    Key $MODKEY-udiaeresis
        amixer -q set $mixer 5-
    Key $MODKEY-Shift-u
        ssh amon@mumm-ra -- amixer -q set Software 5+
    Key $MODKEY-Shift-udiaeresis
        ssh amon@mumm-ra -- amixer -q set Software 5-
    Key $MODKEY-c
        MPD_HOST=192.168.1.15 mpc --no-status toggle
    Key $MODKEY-o
        scrot -s -e "echo %f | xclip -selection c"
    # yes, these are hardcoded positions - so what?
    Key $MODKEY-Control-0
        DISPLAY=:0.0 swarp 840 525
    Key $MODKEY-Control-1
        DISPLAY=:0.1 swarp 640 512
EOF
    for i in 0 1 2 3 4 5 6 7 8 9; do
        sed 's/^\ \ \ \ //' <<EOF
    Key $MODKEY-$i
        wmiir xwrite /ctl view "$i"
    Key $MODKEY-Shift-$i
        wmiir xwrite /client/sel/tags "$i"
EOF
    done
}
wi_events <<EOF
$(events)
$(local_events)
EOF
unset events local_events

wmiir write /ctl <<EOF
font $WMII_FONT
focuscolors $WMII_FOCUSCOLORS
normcolors $WMII_NORMCOLORS
grabmod $MODKEY
border 1
colmode stack-max
EOF

export WMII_FONT WMII_TERM
export WMII_FOCUSCOLORS WMII_SELCOLORS WMII_NORMCOLORS

# Misc
progsfile="$(wmiir namespace)/.proglist"
action status &
wi_proglist $PATH >$progsfile &

# Setup Tag Bar
IFS="$wi_nl"
wmiir rm $(wmiir ls /lbar | sed 's,^,/lbar/,') >/dev/null
seltag=$(wmiir read /tag/sel/ctl | sed 1q)
unset IFS
wi_tags | while read tag
do
    if [ "$tag" = "$seltag" ]; then
        echo "$WMII_FOCUSCOLORS" "$tag"
    else
        echo "$WMII_NORMCOLORS" "$tag"
    fi | wmiir create "/lbar/$tag"
done

wi_eventloop
